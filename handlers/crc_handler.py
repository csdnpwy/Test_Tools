from crcmod import mkCrcFun
from binascii import unhexlify


def calculate_crc(data, crc_type='crc8-rohc'):
    crc_func_map = {
        'crc8-rohc': (0x107, False, 0x00, 0x00),
        'crc16-modbus': (0x18005, True, 0xFFFF, 0x0000),
        'crc32': (0x104C11DB7, True, 0xFFFFFFFF, 0xFFFFFFFF)
    }

    if crc_type not in crc_func_map:
        raise ValueError("calculate_crc: Unsupported CRC type.")

    poly, rev, initCrc, xorOut = crc_func_map[crc_type]
    crc_func = mkCrcFun(poly, rev=rev, initCrc=initCrc, xorOut=xorOut)

    crc_value = crc_func(unhexlify(data))

    if 'crc8' in crc_type:
        crc_hex = format(crc_value, '02X')
    elif 'crc16' in crc_type:
        crc_hex = format(crc_value, '04X')
    else:
        crc_hex = format(crc_value, '08X')

    return crc_hex


"""
* @description: 网关3.0局域网通信crc8校验（查表法）
* @copyright: Copyright (c) 2020 厦门立林科技有限公司
* @author: 潘伟阳
* @date: 2024/03/27 15:50
* @version: 1.0
* @fileName:calc_crc8
* @history:
"""
shift_data = [
    0x00, 0xFE, 0xFF, 0x01, 0xFD, 0x03, 0x02, 0xFC, 0xF9, 0x07, 0x06, 0xF8, 0x04, 0xFA, 0xFB, 0x05,
    0xF1, 0x0F, 0x0E, 0xF0, 0x0C, 0xF2, 0xF3, 0x0D, 0x08, 0xF6, 0xF7, 0x09, 0xF5, 0x0B, 0x0A, 0xF4,
    0xE1, 0x1F, 0x1E, 0xE0, 0x1C, 0xE2, 0xE3, 0x1D, 0x18, 0xE6, 0xE7, 0x19, 0xE5, 0x1B, 0x1A, 0xE4,
    0x10, 0xEE, 0xEF, 0x11, 0xED, 0x13, 0x12, 0xEC, 0xE9, 0x17, 0x16, 0xE8, 0x14, 0xEA, 0xEB, 0x15,
    0xC1, 0x3F, 0x3E, 0xC0, 0x3C, 0xC2, 0xC3, 0x3D, 0x38, 0xC6, 0xC7, 0x39, 0xC5, 0x3B, 0x3A, 0xC4,
    0x30, 0xCE, 0xCF, 0x31, 0xCD, 0x33, 0x32, 0xCC, 0xC9, 0x37, 0x36, 0xC8, 0x34, 0xCA, 0xCB, 0x35,
    0x20, 0xDE, 0xDF, 0x21, 0xDD, 0x23, 0x22, 0xDC, 0xD9, 0x27, 0x26, 0xD8, 0x24, 0xDA, 0xDB, 0x25,
    0xD1, 0x2F, 0x2E, 0xD0, 0x2C, 0xD2, 0xD3, 0x2D, 0x28, 0xD6, 0xD7, 0x29, 0xD5, 0x2B, 0x2A, 0xD4,
    0x81, 0x7F, 0x7E, 0x80, 0x7C, 0x82, 0x83, 0x7D, 0x78, 0x86, 0x87, 0x79, 0x85, 0x7B, 0x7A, 0x84,
    0x70, 0x8E, 0x8F, 0x71, 0x8D, 0x73, 0x72, 0x8C, 0x89, 0x77, 0x76, 0x88, 0x74, 0x8A, 0x8B, 0x75,
    0x60, 0x9E, 0x9F, 0x61, 0x9D, 0x63, 0x62, 0x9C, 0x99, 0x67, 0x66, 0x98, 0x64, 0x9A, 0x9B, 0x65,
    0x91, 0x6F, 0x6E, 0x90, 0x6C, 0x92, 0x93, 0x6D, 0x68, 0x96, 0x97, 0x69, 0x95, 0x6B, 0x6A, 0x94,
    0x40, 0xBE, 0xBF, 0x41, 0xBD, 0x43, 0x42, 0xBC, 0xB9, 0x47, 0x46, 0xB8, 0x44, 0xBA, 0xBB, 0x45,
    0xB1, 0x4F, 0x4E, 0xB0, 0x4C, 0xB2, 0xB3, 0x4D, 0x48, 0xB6, 0xB7, 0x49, 0xB5, 0x4B, 0x4A, 0xB4,
    0xA1, 0x5F, 0x5E, 0xA0, 0x5C, 0xA2, 0xA3, 0x5D, 0x58, 0xA6, 0xA7, 0x59, 0xA5, 0x5B, 0x5A, 0xA4,
    0x50, 0xAE, 0xAF, 0x51, 0xAD, 0x53, 0x52, 0xAC, 0xA9, 0x57, 0x56, 0xA8, 0x54, 0xAA, 0xAB, 0x55
]

def get_shift_val(data, shift_val):
    return shift_data[data ^ shift_val]

def calc_crc8(data):
    val = 0
    for byte in data:
        val = get_shift_val(val, byte)
    return format(val, '02x')


if __name__ == '__main__':
    # # 测试
    # data = '0102030405'
    # crc_type = 'crc16-modbus'
    # crc = calculate_crc(data, crc_type)
    # print(f"CRC-{crc_type.upper()} 校验值（十六进制）：", crc)
    # 示例用法
    data = "4c 45 45 4c 82 00 00 00 00 01 00 7b 22 6d 65 74 68 6f 64 22 3a 22 62 69 6e 64 22 2c 22 73 65 71 22 3a 31 2c 22 70 61 72 61 6d 73 22 3a 7b 22 73 72 63 22 3a 22 30 30 30 31 32 30 30 34 32 34 31 34 30 37 37 37 30 65 33 65 22 2c 22 64 73 74 22 3a 22 30 30 30 31 32 30 30 34 32 34 31 34 30 37 30 32 63 34 66 37 22 2c 22 67 72 6f 75 70 49 64 22 3a 22 31 30 35 39 36 30 38 32 31 31 39 31 39 37 33 32 39 30 31 22 7d 7d"
    # 将十六进制字符串转换为字节列表
    byte_list = bytes.fromhex(data.replace(" ", ""))
    print(byte_list)
    result = calc_crc8(byte_list)
    print("CRC8 校验码为:", result)
